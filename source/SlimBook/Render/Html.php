<?php

/*
 * Copyright (C) 2015 Anders Lövgren (QNET/BMC CompDept).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace SlimBook\Render;

use DOMElement;
use SimpleXMLElement;

/**
 * HTML output render class.
 *
 * @author Anders Lövgren (QNET/BMC CompDept)
 */
class Html extends FormatterBase
{

        public function write($mode = Formatter::WRITE_ALL, $file = null)
        {
                $this->open($file);

                if ($mode == Formatter::WRITE_ALL) {
                        $this->writeDocument();
                } else {
                        if ($mode & Formatter::WRITE_TITLE) {
                                $this->writeDocTitle();
                        }
                        if ($mode & Formatter::WRITE_TOC) {
                                $this->writePageTOC();
                        }
                        if ($mode & Formatter::WRITE_BODY) {
                                $this->writePageBody();
                        }
                        if ($mode & Formatter::WRITE_FOOTER) {
                                $this->writePageFooter();
                        }
                }

                $this->close();
        }

        /**
         * Write complete HTML page.
         */
        private function writeDocument()
        {
                $this->writeDocHeader();
                printf("<body>\n");
                printf("<div class=\"slimbook-main\">\n");
                $this->writePageTOC();
                $this->writePageBody();
                printf("</div>\n");
                $this->writePageFooter();
                printf("</body>\n");
                printf("</html>\n");
        }

        /**
         * Write document header.
         */
        private function writeDocHeader()
        {
                printf("<!DOCTYPE html>\n");
                printf("<!--\n");
                printf("    Generated by SlimBook - Simple XML schema for web page markup and type setting of books.\n");
                printf("    Homepage: http://it.bmc.uu.se/andlov/php/proj/bmc/slimbook\n");
                printf("  -->\n");
                printf("<html>\n");
                printf("<head>\n");
                printf("<meta charset=\"UTF-8\">\n");
                $this->writeDocTitle();
                printf("<link href=\"slimbook.css\" rel=\"stylesheet\" type=\"text/css\" />");
                printf("</head>\n");
        }

        /**
         * Write page title.
         */
        private function writeDocTitle()
        {
                if (count($this->chapters) == 1) {
                        printf("<title>%s - %s</title>\n", $this->info->title, $this->chapters[0]->attributes()['title']);
                } else {
                        printf("<title>%s</title>\n", $this->info->title);
                }
        }

        /**
         * Write table of content (select).
         */
        private function writePageTOC()
        {
                printf("\n");
                printf("<div class=\"slimbook-toc\">\n");
                printf("<select onchange=\"location = this.options[this.selectedIndex].value;\">\n");
                printf("<option value=\"#\" selected=\"selected\">-- Navigation --</option>\n");
                foreach ($this->chapters as $chapter) {
                        printf("<option value=\"#%s\" class=\"chapter\">%s</option>\n", $chapter->attributes()['name'], $chapter->attributes()['title']);
                        foreach ($chapter->paragraph as $paragraph) {
                                printf("<option value=\"#%s-%s\" class=\"paragraph\">&nbsp;&nbsp;%s</option>\n", $chapter->attributes()['name'], $paragraph->attributes()['name'], $paragraph->attributes()['title']);
                        }
                }
                printf("</select>\n");
                printf("</div>\n");
        }

        /**
         * Write main content.
         */
        private function writePageBody()
        {
                printf("\n");
                printf("<div class=\"slimbook-content\">\n");
                if (count($this->chapters) == 1) {
                        printf("<h1>%s - %s</h1>\n", $this->info->title, $this->chapters[0]->attributes()['title']);
                } else {
                        printf("<h1>%s</h1>\n", $this->info->title);
                }
                printf("<div class=\"chapters\">\n");
                foreach ($this->chapters as $chapter) {
                        $this->writeChapter($chapter);
                }
                printf("</div>\n");
                printf("</div>\n");
        }

        /**
         * Write page footer.
         */
        private function writePageFooter()
        {
                printf("\n");
                printf("<div class=\"slimbook-footer\">\n");
                printf("<div class=\"date\">Date: %s</div>\n", $this->info->date);
                printf("<div class=\"author\"><a href=\"mailto:%s\">%s</a></div>\n", $this->info->author->email, $this->info->author->name);
                printf("<div class=\"version\">Version: %s</div>\n", $this->info->version);
                printf("</div>\n");
        }

        private function writeChapter($chapter)
        {
                printf("<div class=\"chapter\">\n");
                printf("<a name=\"%s\"><h2>%s</h2></a>\n", $chapter->attributes()['name'], $chapter->attributes()['title']);
                foreach ($chapter->paragraph as $paragraph) {
                        $this->writeParagraph($chapter, $paragraph);
                }
                printf("</div>\n");
        }

        /**
         * Write a paragraph.
         * @param SimpleXMLElement $chapter
         * @param SimpleXMLElement $paragraph
         */
        private function writeParagraph($chapter, $paragraph)
        {
                printf("<div class=\"paragraph\">\n");
                printf("<a name=\"%s-%s\"><h3>%s</h3></a>\n", $chapter->attributes()['name'], $paragraph->attributes()['name'], $paragraph->attributes()['title']);

                $dom = dom_import_simplexml($paragraph);
                foreach ($dom->childNodes as $child) {
                        switch ($child->nodeType) {
                                case XML_TEXT_NODE:
                                        printf("%s\n", str_replace("\\n", "<br/>\n", trim($child->textContent)));
                                        break;
                                case XML_ELEMENT_NODE:
                                        switch ($child->localName) {
                                                case "video":
                                                        $this->writeVideo($child);
                                                        break;
                                                case "image":
                                                        $this->writeImage($child);
                                                        break;
                                                case "link":
                                                        $this->writeLink($child);
                                                        break;
                                        }
                                        break;
                        }
                }

                printf("</div>\n");
        }

        /**
         * Write video content.
         * @param DOMElement $child
         */
        private function writeVideo($child)
        {
                $mimetypes = array(
                        'mp4'  => 'video/mp4',
                        'webm' => 'video/webm',
                        'ogv'  => 'video/ogg',
                        '3gp'  => 'video/3gp',
                        'flv'  => 'video/x-flv',
                        'std'  => 'application/binary'
                );
                if (($pos = strrpos($child->getAttribute('source'), "."))) {
                        $extension = substr($child->getAttribute('source'), $pos + 1);
                } else {
                        $extension = 'std';
                }

                printf("<div class=\"video\">\n");
                printf("<div class=\"view\">\n");
                printf("<video controls>\n");
                printf("<source src=\"%s\" type=\"%s\">\n", $child->getAttribute('source'), $mimetypes[$extension]);
                printf("Your browser does not support the video tag.\n");
                printf("</video>\n");
                printf("</div>\n");
                printf("<p>%s</p>\n", $child->getAttribute('title'));
                printf("</div>\n");
        }

        /**
         * Write image content.
         * @param DOMElement $child
         */
        private function writeImage($child)
        {
                printf("<div class=\"image\">\n");
                printf("<div class=\"view\">\n");
                printf("<a href=\"%s\"><img src=\"%s\" /></a>\n", $child->getAttribute('source'), $child->getAttribute('source'));
                printf("</div>\n");
                printf("<p>%s</p>\n", $child->getAttribute('title'));
                printf("</div>\n");
        }

        /**
         * Write link content.
         * @param DOMElement $child
         */
        private function writeLink($child)
        {
                $target = $child->getAttribute('target');
                $title = $child->getAttribute('title');

                if ($target[0] == '/') {
                        $parts = explode('/', $target);
                        if (count($parts) == 3) {
                                $target = "#" . $parts[1] . "-" . $parts[2];
                        } else {
                                $target = "#" . $parts[1];
                        }
                }

                printf("<a href=\"%s\" title=\"%s\">%s</a>\n", $target, $title, $child->nodeValue);
        }

}
